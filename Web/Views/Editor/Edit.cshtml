@model Goody.Web.Models.ViewModels.ItemViewModel<int>
@{
    ViewBag.Title = "Edit";
}

<h2>CK Editor</h2>

<div class="container">
    <form>
        <input type="text" name="title" id="title" placeholder="Type your title here..." />
        <textarea name="editor1" id="editor1" rows="10" cols="80" placeholder="Type your content here..."></textarea>
        <div>
            <button type="button" id="btnSubmit" value="Submit">Submit</button>
            <button type="button" id="btnCancel" value="Submit">Cancel</button>
        </div>
    </form>
</div>

@section scripts{
    <script src="~/Scripts/ckeditor/ckeditor.js"></script>
    <script>
        // Replace the <textarea id="editor1"> with a CKEditor
        // instance, using default configuration.
        CKEDITOR.replace('editor1', {
            customConfig: 'config.js'
        });
    </script>
    <script>
        goody.page.item = {};
        goody.page.targetId = @Model.Item;

        goody.page.startUp = function () {
            console.log('CKEditor Example Edit/Create - startUp function');
            $("#btnSubmit").on("click", goody.page.handlers.onUpdateClick);
            $("#btnCancel").on("click", goody.page.handlers.onCancelClick);
            if(goody.page.targetId){
                goody.services.getEditorContent(
                    goody.page.targetId, 
                    goody.page.handlers.onGetEditorContentSuccess, 
                    goody.page.handlers.onEditorContentError);
            }
        };

        goody.page.handlers.onUpdateClick = function (e) {
            e.preventDefault();

            //grab values from the form and enter it into the payload
            goody.page.item.title = $('#title').val();
            goody.page.item.description = CKEDITOR.instances.editor1.getData();
            //grab values from the form and enter it into the payload

            //send request to the server
            if(goody.page.targetId){
                goody.services.updateEditorContent(
                    goody.page.item, 
                    goody.page.handlers.onUpdateEditorContentSuccess, 
                    goody.page.handlers.onEditorContentError);
            } else {
                goody.services.insertEditorContent(
                    goody.page.item, 
                    goody.page.handlers.onInsertEditorContentSuccess, 
                    goody.page.handlers.onEditorContentError);
            }

        };

        goody.page.handlers.onCancelClick = function(){
            window.location = window.location='/editor/index';
        };

        goody.services.getEditorContent = function (data, onSuccess, onError) {
            var url = '/api/editor/' + data;
            var settings = {
                cache: false,
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                type: 'GET',
                success: onSuccess,
                error: onError,
                xhrFields: {
                    withCredentials: true
                }
            };
            $.ajax(url, settings);
        };

        goody.services.updateEditorContent = function (data, onSuccess, onError) {
            var url = '/api/editor';
            var settings = {
                cache: false,
                contentType: "application/json",
                type: 'PUT',
                data: JSON.stringify(data),
                success: onSuccess,
                error: onError,
                xhrFields: {
                    withCredentials: true
                }
            };
            $.ajax(url, settings);
        };

        goody.services.insertEditorContent = function (data, onSuccess, onError) {
            var url = '/api/editor';
            var settings = {
                cache: false,
                contentType: "application/json",
                type: 'POST',
                data: JSON.stringify(data),
                success: onSuccess,
                error: onError,
                xhrFields: {
                    withCredentials: true
                }
            };
            $.ajax(url, settings);
        };

        goody.page.handlers.onGetEditorContentSuccess = function (data, textStatus, jqXHR) {
            goody.page.item = data.item;
            $('#title').val(goody.page.item.title);
            $('#editor1').val(goody.page.item.description);
        };

        goody.page.handlers.onUpdateEditorContentSuccess = function (data, textStatus, jqXHR) {
            console.log("Update success!!!");
            window.location='/editor/index';
        };

        goody.page.handlers.onInsertEditorContentSuccess = function (data, textStatus, jqXHR) {
            console.log("Insert success!!!");
            window.location='/editor/index';
        };

        goody.page.handlers.onEditorContentError = function (jqXHR, textStatus, thrownerror) {
            console.error(textStatus);
        };

    </script>
}